@page "{id}"
@using AgentServer.Pages
@model TermModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PowerShell Web Terminal</title>
    <link rel="stylesheet" href="~/js/xterm/css/xterm.css" />
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #1e1e1e;
        }

        #terminal {
            width: 100%;
            height: 100%;
            font-family: Consolas, 'Courier New', monospace;
        }
    </style>
</head>
<body>
    <div id="terminal"></div>

    <script src="~/js/xterm/lib/xterm.js"></script>
    <script src="~/js/xterm-addon-fit/lib/xterm-addon-fit.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        let agentId = @Html.Raw(Json.Serialize(Model.Id));

        document.addEventListener("DOMContentLoaded", function () {
            const term = new Terminal({
                cursorBlink: true,
                convertEol: true, // This helps format pasted text with newlines
                theme: { background: '#1e1e1e', foreground: '#d4d4d4', cursor: '#d4d4d4' }
            });

            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);
            term.open(document.getElementById('terminal'));
            fitAddon.fit();
            window.onresize = () => fitAddon.fit();
            term.focus();

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/AgentHub")
                .build();

            connection.on("ReceiveOutput", (output) => term.write(output.replace(/\n/g, '\r\n')));

            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    connection.invoke("RegisterTerminal", agentId);
                } catch (err) {
                    console.error(err);
                    term.write("Connection failed: " + err);
                }
            }
            start();

            let currentCommand = '';
            let completionCycle = [];
            let completionIndex = 0;

            // --- Handler 1: Use onKey ONLY for special keys needing preventDefault ---
            term.onKey(async ({ domEvent }) => {
                if (domEvent.keyCode === 9) { // Tab
                    domEvent.preventDefault();
                    if (completionCycle.length === 0) {
                        const completions = await connection.invoke("GetCompletion", agentId, currentCommand, currentCommand.length);
                        if (completions.length === 0) return;
                        completionCycle = completions;
                        completionIndex = 0;
                    } else {
                        completionIndex = (completionIndex + 1) % completionCycle.length;
                    }

                    const completion = completionCycle[completionIndex];
                    const lastSpaceIndex = currentCommand.lastIndexOf(' ');
                    const wordToComplete = (lastSpaceIndex === -1) ? currentCommand : currentCommand.substring(lastSpaceIndex + 1);

                    term.write('\b \b'.repeat(wordToComplete.length));
                    term.write(completion);

                    const commandBase = (lastSpaceIndex === -1) ? "" : currentCommand.substring(0, lastSpaceIndex + 1);
                    currentCommand = commandBase + completion;
                }
            });

            // --- Handler 2: Use onData for ALL other input, including typing and pasting ---
            term.onData((data) => {
                // Any data input (typing, pasting) breaks the tab completion cycle.
                // We check if the data is NOT a tab character itself, though onKey handles it.
                if (data.charCodeAt(0) !== 9) {
                    completionCycle = [];
                }

                const code = data.charCodeAt(0);
                if (code === 13) { // Enter (\r)
                    term.write('\r\n');
                    connection.invoke("SendInput", agentId, currentCommand).catch(err => console.error(err.toString()));
                    currentCommand = '';
                } else if (code === 127) { // Backspace (\x7F)
                    if (currentCommand.length > 0) {
                        term.write('\b \b');
                        currentCommand = currentCommand.slice(0, -1);
                    }
                } else if (code >= 32) { // Printable characters and pasted text
                    currentCommand += data;
                    term.write(data);
                }
            });
        });
    </script>
</body>
</html>